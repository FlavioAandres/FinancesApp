service: personal-interface
plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  exclude:
    - client/**
    - node_modules/puppeteer/.local-chromium/**
    - node_modules/chrome-aws-lambda/** # The function is provided by the layer
    - devutils/**
    - AutomationServices/AutoMailChecker/**

custom:
  ArnSQSForwardingConfirmation:
    dev: ${file(./config/dev.json):EMAIL_FORWARDING_CONFIRMATION_SQS}
    test:
      Ref: EmailForwardingAceptationQueue
    prod:
      Ref: EmailForwardingAceptationQueue

#   ArnSQSEmails:
#     dev: ${file(./config/dev.json):USER_SCHEDULE_SQS_URL}
#     test:
#       Ref: EmailUsersQueue
#     prod:
#       Ref: EmailUsersQueue

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  memorySize: 520 # optional, in MB, default is 1024
  timeout: 15 # optional, in seconds, default is 6
  environment: #Shared Environments
    NODE_ENV: ${opt:stage}
    MONGO_SRV: ${file(./config/${opt:stage}.json):SRV_CONFIG}
    MONGO_PORT: 27017
    MONGO_HOST: ${file(./config/${opt:stage}.json):MONGO_HOST}
    MONGO_SECRET: ${file(./config/${opt:stage}.json):MONGO_SECRET}
    MONGO_DATABASE: ${file(./config/${opt:stage}.json):MONGO_DATABASE}
    MONGO_SET: ${file(./config/${opt:stage}.json):MONGO_SET}
    MONGO_USER: ${file(./config/${opt:stage}.json):MONGO_USER}
    MONGO_SSL: true
  iamRoleStatements:
    - Effect: Allow
      Action: ses:SendRawEmail
      Resource:
        - "*"

functions:
  TwilioIncommingMessage:
    handler: AutomationServices/WhatsAppBot/handlerIncommingMessage.handler
    name: TwilioIncommingMessage-lambda-${opt:stage}
    events:
      - http:
          path: "/whatsapp/webhook/"
          method: "post"
          cors:
            - enabled: true
            - origin: "*"
            - headers:
                - Content-Type
                - Transfer-encoding

  GetPrepayments:
    handler: API/Functions/Payments.get
    name: PrepaymentsRepo-get-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PutPrepayments:
    handler: API/Functions/Payments.put
    name: PrepaymentsRepo-put-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: PUT
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PostPrepayments:
    handler: API/Functions/Payments.post
    name: PrepaymentsRepo-post-${opt:stage}
    events:
      - http:
          path: /payments
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetStats:
    handler: API/Functions/BoxFlow.get
    name: StatsRepo-get-${opt:stage}
    events:
      - http:
          path: /boxflow/stats
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  UpdateEmailCredentials:
    handler: API/Functions/Users.updateEmailSourceCredentials
    name: UpdateEmailCredentials-put-${opt:stage}
    events:
      - http:
          path: /user/settings/email
          method: PUT
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetUser:
    handler: API/Functions/Users.getUserInformation
    name: UserRepo-get-${opt:stage}
    events:
      - http:
          path: /user
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  AddBankToUser:
    handler: API/Functions/Users.addBankToUser
    name: UserRepo-banks-PUT-${opt:stage}
    events:
      - http:
          path: /user/banks
          method: patch
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub
  GetBanks:
    handler: API/Functions/Banks.getBanks
    name: BanksRepo-GET-${opt:stage}
    events:
      - http:
          path: /banks
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  CheckUserSecret:
    handler: API/Functions/Users.checkSecretKey
    name: UserRepo-post-secretKey-${opt:stage}
    events:
      - http:
          path: /user/secret
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  SaveCategory:
    handler: API/Functions/Users.addNewCategory
    name: UserRepo-Categories-POST-${opt:stage}
    events:
      - http:
          path: /user/categories
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  AddBudgetCategory:
    handler: API/Functions/Users.addBudgetCategory
    name: UserRepo-Categories-budget-POST-${opt:stage}
    events:
      - http:
          path: /user/categories/budget
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetDataCredit:
    handler: API/Functions/DataCredit.get
    name: DataCredit-get-${opt:stage}
    events:
      - http:
          path: /datacredit
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  # Create the user on the MongoDB database
  PostConfirmationUser:
    handler: API/Functions/Users.postConfirmation
    name: PostConfirmationUser-${opt:stage}

  #INCOMES

  GetIncomes:
    handler: API/Functions/Incomes.get
    name: Incomes-GET-${opt:stage}
    events:
      - http:
          path: /incomes
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PostIncomes:
    handler: API/Functions/Incomes.post
    name: Incomes-POST-${opt:stage}
    events:
      - http:
          path: /incomes
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PutIncomes:
    handler: API/Functions/Incomes.get
    name: Incomes-PUT-${opt:stage}
    events:
      - http:
          path: /incomes/{income}
          method: PUT
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  #AUTOMATIONS
  EmailForwardingAcceptation:
    handler: AutomationServices/EmailFowardingAccept/scraper.start
    name: EmailForwardingAcceptation-${opt:stage}
    timeout: 120
    memorySize: 2048
    layers:
      - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:22
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EmailForwardingAceptationQueue
              - Arn
          batchSize: 1

  ProcessEmails:
    handler: AutomationServices/EmailsForwardingReader.process
    name: ProcessEmail-${opt:stage}
    iamRoleStatementsName: write-sqs-finances-email-forwarding-confirmation-${opt:stage}-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "sqs:SendMessage"
          - "sqs:SendMessageBatch"
        Resource:
          Fn::GetAtt:
            - EmailForwardingAceptationQueue
            - Arn
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
        Resource:
          - Fn::Join:
              - ""
              - - Fn::GetAtt: [EmailsBucket, Arn]
                - "/*"
    environment:
      BUCKETNAME: finance-emails-${opt:stage}
      EMAIL_FORWARDING_CONFIRMATION_SQS: ${self:custom.ArnSQSForwardingConfirmation.${opt:stage, self:provider.stage}}

  # EmailChecker:
  #   handler: AutomationServices/AutoMailChecker/checker.start
  #   name: AutomationServices-EmailChecker-${opt:stage}
  #   timeout: 120
  #   events:
  #     - sqs:
  #         arn:
  #           Fn::GetAtt:
  #             - EmailUsersQueue
  #             - Arn
  #         batchSize: 1
  #   environment:
  #     EMAIL_USERNAME: ${file(./config/${opt:stage}.json):EMAIL_USERNAME}
  #     EMAIL_PASSWORD: ${file(./config/${opt:stage}.json):EMAIL_PASSWORD}

  PaymentsAnalizer:
    handler: AutomationServices/AnalizerTask/analizer.start
    name: AutomationServices-AnalizerTasks-${opt:stage}
    events:
      - schedule:
          description: "Runs every month"
          rate: cron(0 0 1 * ? *) # First day of the month
          enabled: true
          input:
            ExecutionType: "MONTHLY"
      - schedule:
          description: "Runs every sunday"
          rate: cron(0 0 ? * SUN *)
          enabled: true
          input:
            ExecutionType: "WEEKLY"
    environment:
      TWILIO_ACCESS_TOKEN: ${file(./config/${opt:stage}.json):TWILIO_ACCESS_TOKEN}
      TWILIO_SECTRET_KEY: ${file(./config/${opt:stage}.json):TWILIO_SECTRET_KEY}

  # Deprecated function since DataCredito updates the backend
  # DataCreditoScraper:
  #   handler: AutomationServices/DataCreditoScraper/scraper.start
  #   name: AutomationServices-DataCreditoScraper-${opt:stage}
  #   memorySize: 2048 # Recomended, in MB, default is 1024
  #   timeout: 60 # Recomended, in seconds, default is 6
  #   events:
  #     - schedule:
  #         name: "cw-start-datacredito-scraper"
  #         description: "Function to scraper datacredito data"
  #         rate: cron(0 0 15,30 * ? *) # Every Fifteen days, some entities take a time to report updates
  #         enabled: false
  #   layers:
  #     - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:22
  #   environment:
  #     EMAIL_USERNAME: ${file(./config/${opt:stage}.json):EMAIL_USERNAME}
  #     SECRET_KEY: ${file(./config/${opt:stage}.json):SECRET_KEY}

  HideNoAcceptedPayments:
    handler: AutomationServices/AutoHidePayments/handler.start
    description: "Function to hide payments not accepted after 30 days"
    name: AutomationServices-HideNoAcceptedPayments-${opt:stage}
    events:
      - schedule:
          name: "cw-hide-payments-not-accepted"
          rate: rate(1 day)
          enabled: true

  # ScheduleUsersToCheckEmails:
  #   handler: AutomationServices/AutoMailChecker/schedule.start
  #   name: AutomationServices-ScheduleUsers-${opt:stage}
  #   iamRoleStatementsName: write-sqs-finances-${opt:stage}-role
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 'sqs:SendMessage'
  #         - 'sqs:SendMessageBatch'
  #       Resource:
  #         Fn::GetAtt:
  #           - EmailUsersQueue
  #           - Arn
  #   events:
  #     - schedule:
  #         enabled: true
  #         rate: rate(20 minutes)
  #   environment:
  #     USER_SCHEDULE_SQS_URL: ${self:custom.ArnSQSEmails.${opt:stage, self:provider.stage}}

resources:
  Resources:
    # EmailUsersQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     QueueName: "email-users-checker"
    #     VisibilityTimeout: 300

    EmailForwardingAceptationQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "email-forwarding-aceptation"
        VisibilityTimeout: 300

    GiveSESPermissionToInvokeProcessEmailLambdaFunction:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": ["ProcessEmailsLambdaFunction", "Arn"] }
        Principal: ses.amazonaws.com
        Action: "lambda:InvokeFunction"
        SourceAccount: { Ref: AWS::AccountId }

    EmailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: finance-emails-${opt:stage}

    EmailsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: EmailsBucket }
        PolicyDocument:
          Statement:
            - Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                Fn::Join:
                  - ""
                  - - { "Fn::GetAtt": ["EmailsBucket", "Arn"] }
                    - "/*"
              Principal:
                Service: ses.amazonaws.com
              Condition:
                StringEquals:
                  aws:Referer: { Ref: AWS::AccountId }

    SesLambdaRule:
      Type: AWS::SES::ReceiptRule
      DependsOn:
        - GiveSESPermissionToInvokeProcessEmailLambdaFunction
        - EmailsBucketPolicy
      Properties:
        Rule:
          Enabled: true
          ScanEnabled: true
          Name: finance-email-rule-${opt:stage}
          Recipients: ${file(./config/${opt:stage}.json):EMAIL_RECIPIENTS}
          Actions:
            - LambdaAction:
                FunctionArn:
                  { "Fn::GetAtt": ["ProcessEmailsLambdaFunction", "Arn"] }
            - S3Action:
                BucketName: finance-emails-${opt:stage}
        RuleSetName: default-rule-set
