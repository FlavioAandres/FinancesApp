service: personal-interface
plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  exclude:
    - client/**
    - node_modules/puppeteer/.local-chromium/**
    - node_modules/chrome-aws-lambda/** # The function is provided by the layer
    - devutils/**

custom:
  PostReceiveEmailMessage:
    dev: ${file(./config/dev.json):EMAIL_FORWARDING_CONFIRMATION_SQS}
    test:
      Ref: PostReceiveEmailMessage
    prod:
      Ref: PostReceiveEmailMessage
  AcceptationEmailQueue:
    dev: ${file(./config/dev.json):EMAIL_FORWARDING_ACCEPT_SQS}
    test:
      Ref: AcceptationEmailQueue
    prod:
      Ref: AcceptationEmailQueue

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  memorySize: 520 # optional, in MB, default is 1024
  timeout: 15 # optional, in seconds, default is 6
  environment: #Shared Environments
    NODE_ENV: ${opt:stage}
    MONGO_SRV: ${file(./config/${opt:stage}.json):SRV_CONFIG}
    MONGO_PORT: 27017
    MONGO_HOST: ${file(./config/${opt:stage}.json):MONGO_HOST}
    MONGO_SECRET: ${file(./config/${opt:stage}.json):MONGO_SECRET}
    MONGO_DATABASE: ${file(./config/${opt:stage}.json):MONGO_DATABASE}
    MONGO_SET: ${file(./config/${opt:stage}.json):MONGO_SET}
    MONGO_USER: ${file(./config/${opt:stage}.json):MONGO_USER}
    MONGO_SSL: true

functions:

  GetPrepayments:
    handler: API/Functions/Payments.get
    name: PrepaymentsRepo-get-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: GET
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PutPrepayments:
    handler: API/Functions/Payments.put
    name: PrepaymentsRepo-put-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: PUT
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PostPrepayments:
    handler: API/Functions/Payments.post
    name: PrepaymentsRepo-post-${opt:stage}
    events:
      - http:
          path: /payments
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetStats:
    handler: API/Functions/BoxFlow.get
    name: StatsRepo-get-${opt:stage}
    events:
      - http:
          path: /boxflow/stats
          method: GET
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  UpdateEmailCredentials:
    handler: API/Functions/Users.updateEmailSourceCredentials
    name: UpdateEmailCredentials-put-${opt:stage}
    events:
      - http:
          path: /user/settings/email
          method: PUT
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetUser:
    handler: API/Functions/Users.getUserInformation
    name: UserRepo-get-${opt:stage}
    events:
      - http:
          path: /user
          method: GET
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  AddBankToUser:
    handler: API/Functions/Users.addBankToUser
    name: UserRepo-banks-PUT-${opt:stage}
    events:
      - http:
          path: /user/banks
          method: patch
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub
  GetBanks:
    handler: API/Functions/Banks.getBanks
    name: BanksRepo-GET-${opt:stage}
    events:
      - http:
          path: /banks
          method: GET
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  CheckUserSecret:
    handler: API/Functions/Users.checkSecretKey
    name: UserRepo-post-secretKey-${opt:stage}
    events:
      - http:
          path: /user/secret
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  SaveCategory:
    handler: API/Functions/Users.addNewCategory
    name: UserRepo-Categories-POST-${opt:stage}
    events:
      - http:
          path: /user/categories
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  AddBudgetCategory:
    handler: API/Functions/Users.addBudgetCategory
    name: UserRepo-Categories-budget-POST-${opt:stage}
    events:
      - http:
          path: /user/categories/budget
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub
  putBudgetCategory:
    handler: API/Functions/Users.putBudgetCategory
    name: UserRepo-Categories-budget-PUT-${opt:stage}
    events:
      - http:
          path: /user/categories/budget/{categoryValue}
          method: PUT
          integration: lambda
          cors: true
          request: 
            paths: 
              categoryValue: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  # Create the user on the MongoDB database
  PostConfirmationUser:
    handler: API/Functions/Users.postConfirmation
    name: PostConfirmationUser-${opt:stage}

  #INCOMES

  GetIncomes:
    handler: API/Functions/Incomes.get
    name: Incomes-GET-${opt:stage}
    events:
      - http:
          path: /incomes
          method: GET
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PostIncomes:
    handler: API/Functions/Incomes.post
    name: Incomes-POST-${opt:stage}
    events:
      - http:
          path: /incomes
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PutIncomes:
    handler: API/Functions/Incomes.get
    name: Incomes-PUT-${opt:stage}
    events:
      - http:
          path: /incomes/{income}
          method: PUT
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  #Telegram Bot
  TelegramBotSetWebhook:
    handler: AutomationServices/TelegramBot/handler.setWebhook
    name: TelegramBotSetWebhook-POST-${opt:stage}
    events:
      - http:
          path: /telegram/setWebhook
          method: POST
          cors: true
    environment:
      BOT_TOKEN: ${file(./config/${opt:stage}.json):TELEGRAM_BOT_KEY}

  TelegramBotWebHook:
    handler: AutomationServices/TelegramBot/handler.webhook
    name: TelegramBotWebHook-POST-${opt:stage}
    events:
      - http:
          path: /telegram/webhook
          method: POST
          cors: true
    environment:
      BOT_TOKEN: ${file(./config/${opt:stage}.json):TELEGRAM_BOT_KEY}

  #AUTOMATIONS


  ProcessEmailsFromUsers:
    handler: AutomationServices/EmailsForwardingReader/index.process
    name: ProcessEmailsFromUsers-${opt:stage}
    timeout: 120
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PostReceiveEmailMessage
              - Arn
          batchSize: 1
  EmailForwardingAcceptation:
    handler: AutomationServices/EmailFowardingAccept/scraper.start
    name: EmailForwardingAcceptation-${opt:stage}
    timeout: 120
    memorySize: 2048
    layers:
      - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:22
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AcceptationEmailQueue
              - Arn
          batchSize: 1

  EmailChecker:
    handler: AutomationServices/AutoMailChecker/checker.start
    name: AutomationServices-EmailChecker-${opt:stage}
    timeout: 120
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EmailUsersQueue
              - Arn
          batchSize: 1
    environment:
      EMAIL_USERNAME: ${file(./config/${opt:stage}.json):EMAIL_USERNAME}
      EMAIL_PASSWORD: ${file(./config/${opt:stage}.json):EMAIL_PASSWORD}

  PaymentsAnalizer:
    handler: AutomationServices/AnalizerTask/analizer.start
    name: AutomationServices-AnalizerTasks-${opt:stage}
    events:
      - schedule:
          description: "Runs every month"
          rate: cron(0 0 1 * ? *) # First day of the month
          enabled: true
          input:
            ExecutionType: "MONTHLY"
      - schedule:
          description: "Runs every sunday"
          rate: cron(0 0 ? * SUN *)
          enabled: true
          input:
            ExecutionType: "WEEKLY"
    environment:
      TWILIO_ACCESS_TOKEN: ${file(./config/${opt:stage}.json):TWILIO_ACCESS_TOKEN}
      TWILIO_SECTRET_KEY: ${file(./config/${opt:stage}.json):TWILIO_SECTRET_KEY}

  HideNoAcceptedPayments:
    handler: AutomationServices/AutoHidePayments/handler.start
    description: "Function to hide payments not accepted after 30 days"
    name: AutomationServices-HideNoAcceptedPayments-${opt:stage}
    events:
      - schedule:
          # name: "cw-hide-payments-not-accepted"
          rate: rate(1 day)
          enabled: true

  BudgetMonthlyCleaner:
    handler: AutomationServices/Budgets.clean
    name: AutomationServices-BudgetsCleaner-${opt:stage}
    events:
      - schedule:
          enabled: true
          rate: cron(0 0 1 * ? *)

  ScheduleUsersToCheckEmails:
    handler: AutomationServices/AutoMailChecker/schedule.start
    name: AutomationServices-ScheduleUsers-${opt:stage}
    iamRoleStatementsName: write-sqs-finances-${opt:stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - "*"
        Resource:
          Fn::GetAtt:
            - EmailUsersQueue
            - Arn
    events:
      - schedule:
          enabled: false
          rate: rate(20 minutes)
    environment:
      USER_SCHEDULE_SQS_URL: 
        Ref: EmailUsersQueue
      
  IncomingEmailWebhook:
    handler: API/Functions/Webhook/incoming.run
    name: Webhook-incoming-POST-${opt:stage}
    iamRoleStatementsName: write-sqs-postemail-${opt:stage}-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - "*"
        Resource:
          Fn::GetAtt:
            - PostReceiveEmailMessage
            - Arn
      - Effect: 'Allow'
        Action:
          - "*"
        Resource:
          Fn::GetAtt:
            - AcceptationEmailQueue
            - Arn
    events:
      - http:
          path: /webhook/incoming
          method: POST
          integration: lambda
          cors:
            enabled: true
            origin: "*"
            headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    environment:
      POST_INCOMING_WEBHOOK_QUEUE: ${self:custom.PostReceiveEmailMessage.${opt:stage}}
      EMAIL_FORWARDING_ACCEPT_SQS: ${self:custom.AcceptationEmailQueue.${opt:stage}}
# Resources
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    EmailUsersQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "email-users-checker-${opt:stage}"
        VisibilityTimeout: 300
    PostReceiveEmailMessage:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "post-receive-email-${opt:stage}"
        VisibilityTimeout: 300
    AcceptationEmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "post-acceptation-email-${opt:stage}"
        VisibilityTimeout: 300